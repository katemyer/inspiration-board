{"version":3,"sources":["components/Card.js","components/NewCardForm.js","components/Board.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","className","text","emoji","getUnicode","onClick","id","onDeleteClick","EMOJI_LIST","NewCardForm","useState","formFields","setFormFields","onInputChange","event","newFormFields","target","name","value","console","log","onSubmit","preventDefault","onAddCard","data-testid","htmlFor","onChange","map","index","key","type","Board","cards","setCards","errorMessage","setErrorMessage","getCards","useCallback","axios","get","url","boardName","then","res","apiCardsData","data","catch","error","message","ur","useEffect","delete","post","cardh","card","App","setBoardName","for","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9a5e2792.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport emoji from \"emoji-dictionary\";\n\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  //*need to get id from card\n  const onClickGetCardId = () => {\n    //already have this id={cardh.card.id},  accessible at board.js, so it's a prop\n    const id = props.id;\n    props.onDeleteClick(id);\n  };\n\n  return (\n    <div className=\"card\">\n      <ul className=\"card__content\">\n        <p className=\"card__content-text\">{props.text}</p>\n        <span className=\"card__content-emoji\">\n          {emoji.getUnicode(`${props.emoji}`)}\n        </span>\n        <button className=\"card__delete\" onClick={onClickGetCardId}>\n          Delete\n        </button>\n      </ul>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  id: PropTypes.number.isRequired,\n  text: PropTypes.string.isRequired,\n  emoji: PropTypes.string,\n};\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n//import emoji from \"emoji-dictionary\";\nimport \"./NewCardForm.css\";\nconst EMOJI_LIST = [\n  \"\",\n  \"heart_eyes\",\n  \"beer\",\n  \"clap\",\n  \"sparkling_heart\",\n  \"heart_eyes_cat\",\n  \"dog\",\n  \"coffee\",\n  \"smiley\",\n  \"grimacing\",\n  \"poop\",\n  \"joy\",\n  \"sob\",\n  \"wink\", \n  \"face_with_rolling_eyes\",\n  \"zap\",\n  \"100\"\n];\n//Create a NewCardForm component which will add new cards to the board and trigger POST requests to the API to create a card on the API.\nconst NewCardForm = (props) => {\n  //STATE\n  const [formFields, setFormFields] = useState({\n    text: \"\",\n    emoji: \"\",\n  });\n  // event handler\n  const onInputChange = (event) => {\n    const newFormFields = {\n      ...formFields,\n    };\n    newFormFields[event.target.name] = event.target.value; //linked in line 66\n    setFormFields(newFormFields);\n    console.log(newFormFields);\n  };\n  //submitting form \"ok\"\n  const onFormSubmit = (event) => {\n    event.preventDefault();\n    //console.log(event.target)\n    props.onAddCard(formFields);\n    //resets fields\n    setFormFields({\n      text: \"\",\n      emoji: \"\",\n    });\n  };\n  //https://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js\n  //error for child needing unique key. when added key={index} error went away\n  const generateEmojiOptions = () => {\n    return EMOJI_LIST.map((emoji, index) => {\n      return (\n        <option key={index} value={emoji}>\n          {emoji}\n        </option>\n      );\n    });\n  };\n\n  \n  return (\n    <form\n      className=\"new-card-form\"\n      onSubmit={onFormSubmit}\n      data-testid=\"NewCardForm--form\"\n    >\n      <div>\n        <label className=\"new-card-form__form-label\" htmlFor=\"text\">\n          Text:\n        </label>\n        <input\n          id=\"text\"\n          name=\"text\"\n          value={formFields.text}\n          onChange={onInputChange}\n          className=\"\"\n        />\n      </div>\n      <div>\n        <label className=\"new-card-form__form-label\" htmlFor=\"emoji\">\n          Emoji:\n          <select\n            id=\"emoji\"\n            name=\"emoji\"\n            value={formFields.emoji}\n            onChange={onInputChange}\n          >\n            {generateEmojiOptions()}\n          </select>\n        </label>\n        {/* <input\n          id=\"emoji\"\n          name=\"emoji\"\n          value={formFields.emoji}\n          onChange={onInputChange}\n          className=\"\"\n        /> */}\n      </div>\n      <input type=\"submit\" value=\"Add Card\" />\n    </form>\n  );\n};\nNewCardForm.propTypes = {\n  onAddCard: PropTypes.func.isRequired,\n};\nexport default NewCardForm;\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport \"./Board.css\";\nimport Card from \"./Card\";\nimport NewCardForm from \"./NewCardForm\";\n\nconst Board = (props) => {\n  const [cards, setCards] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  //function for GET and reload page used for wave 3\n  const getCards = useCallback(() => {\n    axios\n      .get(`${props.url}boards/${props.boardName}/cards`)\n      .then((res) => {\n        const apiCardsData = res.data;\n        setCards(apiCardsData);\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n        console.log(error.message);\n      });\n  }, [props.boardName,props.ur])\n  //populate cards on start up\n  useEffect(() => {\n    getCards();\n  }, [getCards]);\n\n  const cardComponents = () => {\n    return cards.map((cardh) => {\n      return (\n        <Card\n          key={cardh.card.id}\n          id={cardh.card.id}\n          onDeleteClick={onDeleteClick}\n          text={cardh.card.text}\n          emoji={cardh.card.emoji}\n        />\n      );\n    });\n  };\n  const onDeleteClick = (id) => {\n    // post call to delete card via id\n\n    axios\n      .delete(`${props.url}cards/${id}`)\n      .then((res) => {\n        const apiDeleteData = res.data;\n\n        getCards();\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      });\n  };\n\n  const onAddCard = (formFields) => {\n    //do API post call: https://alligator.io/react/axios-react/\n\n    axios\n      .post(`${props.url}/boards/${props.boardName}/cards`, formFields)\n      .then((res) => {\n        getCards();\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      });\n  };\n  return (\n    <div className=\"validation-errors-display\">\n      {errorMessage && (\n        <div className=\"validation-errors-display_list\">\n          <h2>{errorMessage}</h2>\n        </div>\n      )}\n      <div>\n        <NewCardForm onAddCard={onAddCard} />\n      </div>\n      <div className=\"board\">{cardComponents()}</div>\n    </div>\n  );\n};\nBoard.propTypes = {\n  url: PropTypes.string.isRequired,\n  boardName: PropTypes.string.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\n\nconst App = () => {\n  const [boardName, setBoardName] = useState(\"katemangubat_board\");\n  //event handler\n  const onBoardChange = (event) => {\n    setBoardName(event.target.value)\n  }\n  \n  return (\n    <section>\n      <header className=\"header\">\n        <h1 className=\"header__h1\">\n          <span className=\"header__text\">{boardName} of Inspirations</span>\n        </h1>\n      </header>\n      <div className=\"header__h1\">\n\n        <label for=\"boards\">Choose a Board:</label>\n        <select \n          id=\"boards\"\n          name=\"boards\"\n          value={boardName}\n          onChange={onBoardChange}\n          >\n          <option value=\"katemangubat_board\">Kate</option>\n          <option value=\"shonds_dubs\">Shonda</option>\n        </select>\n\n\n\n\n      </div>\n      <Board\n        url=\"https://inspiration-board.herokuapp.com/\"\n        boardName={boardName}\n      />\n    </section>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}